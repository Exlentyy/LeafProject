const mineflayer = require("mineflayer");
const TelegramBot = require("node-telegram-bot-api");
const mysql = require('mysql2');
const moment = require('moment');
const mineflayerViewer = require('prismarine-viewer').mineflayer

const telegramToken = '7939854602:AAHcj1CiNVGe4hMrQm6yKv_Om_GXxLEmFRs';
const tgBot = new TelegramBot(telegramToken, { polling: true });

let currentChatId = null;
let delayMessageInProgress = false;

const db = mysql.createConnection({
    host: '65.108.99.34',
    port: 3306,
    user: 'gs61785',
    password: 'JhEvRBVI9J',
    database: 'gs61785'
});

db.connect((err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
        return;
    }
});

const botInfoList = [
    { username: 'LeafProject_01', an: 102 },
    { username: 'LeafProject_02', an: 103 },
    { username: 'LeafProject_03', an: 104 },
    { username: 'LeafProject_04', an: 105 },
    { username: 'LeafProject_05', an: 106 },
    { username: 'LeafProject_06', an: 107 },
    { username: 'LeafProject_07', an: 108 },
    { username: 'LeafProject_08', an: 203 },
    { username: 'LeafProject_09', an: 204 },
    { username: 'LeafProject_10', an: 205 },
    { username: 'LeafProject_11', an: 206 },
    { username: 'LeafProject_12', an: 207 },
    { username: 'LeafProject_13', an: 208 },
    { username: 'LeafProject_14', an: 209 }
];

const createBots = () => {
    return botInfoList.map(botInfo => {
        const bot = mineflayer.createBot({
            host: 'mc.funtime.su',
            username: botInfo.username,
            password: 'LeafProject_0111',
            version: '1.16.5',
            logErrors: false,
            hideErrors: true,
        });

        bot.once('spawn', () => {
            mineflayerViewer(bot, {
                port:3007,
                firstPerson: true,
                viewDistance: "25"
            })
            bot.chat(`/reg LeafProject_0111`);
            bot.chat(`/l LeafProject_0111`);
            bot.chat(`/an${botInfo.an}`);
        });

        return bot;
    });
};

const bots = createBots();

function sendMessageToMinecraft(text) {
    bots.forEach(bot => bot.chat(text));
}

tgBot.on('polling_error', (error) => {
    console.error('Polling error:', error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
});

tgBot.on('message', (msg) => {
    const text = msg.text;
    currentChatId = msg.chat.id;
    chatId = msg.chat.id;
    if (text.startsWith('/chat ')) {
        const messageToSend = text.slice(6);  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /chat

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ Minecraft
        sendMessageToMinecraft(messageToSend);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        tgBot.sendMessage(chatId, `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç Minecraft: ${messageToSend}`);
    }
    if (text === '/start') {
        const userId = msg.from.id;
        db.query('SELECT * FROM users WHERE userID = ?', [userId], (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ –ë–î:', err);
                tgBot.sendMessage(currentChatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return;
            }
            if (results.length > 0) {
                tgBot.sendMessage(currentChatId, 'üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåü\n\n‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ‚ù§Ô∏è');
            } else {
                tgBot.sendMessage(currentChatId, 'üåü –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω:');
            }
        });
    }
    if (text && text !== '/start') {
        const userId = msg.from.id;

        db.query('SELECT * FROM users WHERE userID = ?', [userId], (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ –ë–î:', err);
                tgBot.sendMessage(currentChatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return;
            }

            if (results.length === 0) {
                const login = text;
                db.query('INSERT INTO users (userID, login) VALUES (?, ?)', [userId, login], (err) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î:', err);
                        tgBot.sendMessage(currentChatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
                        return;
                    }
                    tgBot.sendMessage(currentChatId, 'üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåü\n\n‚ù§Ô∏èÔ∏è –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! ‚ù§Ô∏è');
                });
            }
        });
    }

    if (text == '/help') {
        tgBot.sendMessage(currentChatId, '[üîë] –ü–æ–º–æ—â—å: \n\n–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: https://funpay.com/users/9354001\n–ë–ª–∏–∂–∞–π—à–∏–µ –∏–≤–µ–Ω—Ç—ã - /coming\n–ü—Ä–æ—Ñ–∏–ª—å - /profile\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start\n\n–¢–µ—Ö –ü–æ–¥–¥–µ—Ä–∂–∫–∞: https://discord.gg/2mze4Mhc');
    }

    if (text === '/coming') {
        checkUserSubscription(msg.from.id, (isSubscribed) => {
            if (isSubscribed) {
                bots.forEach(bot => bot.chat('/event delay'));
            } else {
                tgBot.sendMessage(currentChatId, '[üîë] –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n\nhttps://funpay.com/users/9354001');
            }
        });
    }
    if (text.startsWith('/givesub')) {
        const parts = text.split(' ');

        if (parts.length < 3) {
            tgBot.sendMessage(currentChatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /givesub [–õ–æ–≥–∏–Ω | UID] [–ø–æ–¥–ø–∏—Å–∫–∞]');
            return;
        }

        const userIdentifier = parts[1];
        const subscriptionPeriod = parts[2];


        function parseSubscriptionPeriod(period) {
            const regex = /^(\d+)([hmsdwy])$/;
            const match = period.match(regex);

            if (!match) {
                return null;
            }

            const value = parseInt(match[1], 10);
            const unit = match[2];

            let milliseconds = 0;

            switch (unit) {
                case 'h':
                    milliseconds = value * 60 * 60 * 1000;
                    break;
                case 'm':
                    milliseconds = value * 60 * 1000;
                    break;
                case 's':
                    milliseconds = value * 1000;
                    break;
                case 'd':
                    milliseconds = value * 24 * 60 * 60 * 1000;
                    break;
                case 'w':
                    milliseconds = value * 7 * 24 * 60 * 60 * 1000;
                    break;
                case 'mo':
                    milliseconds = value * 30 * 24 * 60 * 60 * 1000;
                    break;
                case 'y':
                    milliseconds = value * 365 * 24 * 60 * 60 * 1000;
                    break;
                default:
                    return null;
            }

            return milliseconds;
        }

        const subscriptionTimeInMs = parseSubscriptionPeriod(subscriptionPeriod);
        if (subscriptionTimeInMs === null) {
            tgBot.sendMessage(currentChatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏–º–µ—Ä: 1h, 1m, 1s, 1mo, 1y, 1w');
            return;
        }

        const subscriptionDate = new Date();
        subscriptionDate.setTime(subscriptionDate.getTime() + subscriptionTimeInMs);

        const mskOptions = { timeZone: 'Europe/Moscow', hour12: false };
        const mskDateString = subscriptionDate.toLocaleString('ru-RU', mskOptions);

        checkUserRole(msg.from.id, ['–í–ª–∞–¥–µ–ª–µ—Ü'], (isAuthorized) => {
            if (!isAuthorized) {
                tgBot.sendMessage(currentChatId, '[üîë] –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
                return;
            }

            const query = isNaN(userIdentifier) ? 'SELECT * FROM users WHERE login = ?' : 'SELECT * FROM users WHERE id = ?';
            const queryParam = isNaN(userIdentifier) ? userIdentifier : parseInt(userIdentifier);

            db.query(query, [queryParam], (err, results) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                    tgBot.sendMessage(currentChatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
                    return;
                }

                if (results.length > 0) {
                    const user = results[0];

                    db.query('UPDATE users SET subscribed = ? WHERE id = ?', [subscriptionDate, user.id], (updateErr) => {
                        if (updateErr) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', updateErr);
                            tgBot.sendMessage(currentChatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
                            return;
                        }

                        tgBot.sendMessage(currentChatId, `–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.login} (ID: ${user.id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ: ${mskDateString}`);
                    });
                } else {
                    tgBot.sendMessage(currentChatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
            });
        });
    }
    if (text === '/profile') {
        db.query('SELECT * FROM users WHERE userID = ?', [msg.from.id], (err, results) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è:', err);
                tgBot.sendMessage(currentChatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
                return;
            }

            if (results.length > 0) {
                const user = results[0];
                const subscriptionDate = user.subscribed ? moment(user.subscribed) : null;
                const currentDate = moment();

                let subscriptionStatus = '–ù–µ—Ç';
                let formattedSubscriptionDate = '';

                if (subscriptionDate) {
                    if (subscriptionDate.isAfter(currentDate)) {
                        subscriptionStatus = '–î–∞';
                        formattedSubscriptionDate = subscriptionDate.format('DD.MM.YYYY');
                    } else {
                        subscriptionStatus = '–ù–µ—Ç';
                    }
                }

                const profileMessage = `üë§ –ü—Ä–æ—Ñ–∏–ª—å: ${user.login}\n\nüíó –í–∞—à UID: ${user.id}\nüÜî –í–∞—à ID: ${user.userID}\nüîë –†–æ–ª—å: ${user.role}\nüìÖ –ü–æ–¥–ø–∏—Å–∫–∞: ${subscriptionStatus}${subscriptionStatus === '–î–∞' ? ` || ${formattedSubscriptionDate}` : ''}`;
                tgBot.sendMessage(currentChatId, profileMessage);
            } else {
                tgBot.sendMessage(currentChatId, '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
            }
        });
    }
    if (text.startsWith('/giverole')) {
        const parts = text.split(' ');
        if (parts.length < 3) {
            tgBot.sendMessage(currentChatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /giverole [–õ–æ–≥–∏–Ω | UID] [—Ä–æ–ª—å]');
            return;
        }

        const userIdentifier = parts[1];
        const role = parts[2];
        checkUserRole(msg.from.id, ['–í–ª–∞–¥–µ–ª–µ—Ü'], (isAuthorized) => {
            if (!isAuthorized) {
                tgBot.sendMessage(currentChatId, '[üîë] –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
                return;
            }

            const query = isNaN(userIdentifier) ? 'SELECT * FROM users WHERE login = ?' : 'SELECT * FROM users WHERE id = ?';
            const queryParam = isNaN(userIdentifier) ? userIdentifier : parseInt(userIdentifier);

            db.query(query, [queryParam], (err, results) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                    tgBot.sendMessage(currentChatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
                    return;
                }

                if (results.length > 0) {
                    const user = results[0];
                    db.query('UPDATE users SET role = ? WHERE id = ?', [role, user.id], (updateErr, updateResults) => {
                        if (updateErr) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:', updateErr);
                            tgBot.sendMessage(currentChatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
                            return;
                        }
                        tgBot.sendMessage(currentChatId, `–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.login} (ID: ${user.id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: ${role}`);
                    });
                } else {
                    tgBot.sendMessage(currentChatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
            });
        });
    }
});

const handleBotMessage = (bot, message) => {
    const messageText = message.toString();
    let messageToSend = "";
    const delayMatch = messageText.match(/\[‚åõ\] –ö–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ (\d+) —Å–µ–∫/);
    if (delayMatch && currentChatId) {
        if (!delayMessageInProgress) {
            messageToSend += '[‚åõ] –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –±–æ—Ç—ã –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—à–ª–∏.\n';
            delayMessageInProgress = true;
            setTimeout(() => {
                delayMessageInProgress = false;
            }, 2000);
        }
    }

    const eventMatch = messageText.match(/\[1\] –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≤–µ–Ω—Ç–∞: (\d+) —Å–µ–∫/);
    if (eventMatch && currentChatId) {
        const secondsLeft = eventMatch[1];
        const botIndex = botInfoList.findIndex(info => info.username === bot.username);
        if (botIndex >= 0) {
            const botInfo = botInfoList[botIndex];
            const eventTimeMessage = `[üëæ] –ê–Ω–∞—Ä—Ö–∏—è[${botInfo.an}]: ${secondsLeft} —Å–µ–∫.`;
            messageToSend += eventTimeMessage;
        }
    }

    if (messageToSend.trim() && currentChatId) {
        tgBot.sendMessage(currentChatId, messageToSend.trim());
    }
};

const performPeriodicActions = (bot) => {
    setInterval(() => {
        bot.setControlState('jump', true);
        setTimeout(() => {
            bot.setControlState('jump', false);
        }, 500);
        bot.chat('/ebal');
    }, 2 * 60 * 500);
};


bots.forEach(bot => {
    bot.on('message', (message) => handleBotMessage(bot, message));
    performPeriodicActions(bot);
});

// –ú—É—Å–æ—Ä

function checkUserSubscription(userId, callback) {
    const currentDate = moment().format('YYYY-MM-DD HH:mm:ss');

    db.query('SELECT subscribed FROM users WHERE userID = ?', [userId], (err, results) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏:', err);
            callback(false);
            return;
        }

        if (results.length > 0) {
            const user = results[0];
            if (user.subscribed && moment(user.subscribed).isAfter(currentDate)) {
                callback(true);
            } else {
                callback(false);
            }
        } else {
            callback(false);
        }
    });
}

function checkUserRole(userId, allowedRoles, callback) {
    db.query('SELECT role FROM users WHERE userID = ?', [userId], (err, results) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            callback(false);
            return;
        }

        if (results.length > 0) {
            const userRole = results[0].role;
            callback(allowedRoles.includes(userRole));
        } else {
            callback(false);
        }
    });
}
